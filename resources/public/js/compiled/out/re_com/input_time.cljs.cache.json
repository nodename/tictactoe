["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$parseInt",["^ "],"~$isNaN",["^ "],"~$Error",["^ "],"~$goog",["^ ","~$DEBUG",["^ "]]],"~:use-macros",["^ ","~$validate-args-macro","~$re-com.validate","~$handler-fn","~$re-com.core"],"~:excludes",["~#set",[]],"~:name","~$re-com.input-time","~:imports",null,"~:requires",["^ ","~$reagent","~$reagent.core","^D","^D","^:","^:","~$re-com.text","^E","~$re-com.box","^F","~$re-com.util","^G"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$html-attr?","^:","~$h-box","^F","~$deref-or-value","^G","~$css-style?","^:","~$label","^E","~$number-or-string?","^:","~$pad-zero-number","^G","~$gap","^F"],"~:defs",["^ ","~$text->time",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_com/input_time.cljs","~:line",50,"~:column",8,"~:end-line",50,"~:end-column",18,"~:private",true,"~:arglists",["~#list",["~$quote",["^11",[["~$text"]]]]],"~:doc","return as a time int, the contents of 'text'"],"^[",true,"^?","~$re-com.input-time/text->time","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",18,"~:method-params",["^11",[["^13"]]],"~:protocol-impl",null,"~:arglists-meta",["^11",[null,null]],"^X",1,"~:variadic?",false,"^W",50,"~:ret-tag","~$number","^Y",50,"~:max-fixed-arity",1,"~:fn-var",true,"^10",["^11",["^12",["^11",[["^13"]]]]],"^14","return as a time int, the contents of 'text'"],"~$on-defocus",["^ ","^T",null,"^U",["^ ","^V","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_com/input_time.cljs","^W",116,"^X",8,"^Y",116,"^Z",18,"^[",true,"^10",["^11",["^12",["^11",[["~$text-model","~$min","~$max","~$callback","~$previous-val"]]]]],"^14","Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"],"^[",true,"^?","~$re-com.input-time/on-defocus","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",18,"^16",["^11",[["^1?","^1@","^1A","^1B","^1C"]]],"^17",null,"^18",["^11",[null,null]],"^X",1,"^19",false,"^W",116,"^1:",["^>",["~$any","~$clj-nil"]],"^Y",116,"^1<",5,"^1=",true,"^10",["^11",["^12",["^11",[["^1?","^1@","^1A","^1B","^1C"]]]]],"^14","Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"],"~$valid-time?",["^ ","^T",null,"^U",["^ ","^V","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_com/input_time.cljs","^W",74,"^X",8,"^Y",74,"^Z",19,"^[",true,"^10",["^11",["^12",["^11",[["~$time"]]]]]],"^[",true,"^?","~$re-com.input-time/valid-time?","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",19,"^16",["^11",[["^1H"]]],"^17",null,"^18",["^11",[null,null]],"^X",1,"^19",false,"^W",74,"^1:","~$boolean","^Y",74,"^1<",1,"^1=",true,"^10",["^11",["^12",["^11",[["^1H"]]]]]],"~$input-time-args-desc",["^ ","^?","~$re-com.input-time/input-time-args-desc","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^W",127,"^X",1,"^Y",127,"^Z",26,"^U",["^ ","^V","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_com/input_time.cljs","^W",127,"^X",6,"^Y",127,"^Z",26],"~:tag","~$cljs.core/IVector"],"~$time->hrs",["^ ","^T",null,"^U",["^ ","^V","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_com/input_time.cljs","^W",15,"^X",8,"^Y",15,"^Z",17,"^[",true,"^10",["^11",["^12",["^11",[["^1H"]]]]]],"^[",true,"^?","~$re-com.input-time/time->hrs","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",17,"^16",["^11",[["^1H"]]],"^17",null,"^18",["^11",[null,null]],"^X",1,"^19",false,"^W",15,"^1:","^1;","^Y",15,"^1<",1,"^1=",true,"^10",["^11",["^12",["^11",[["^1H"]]]]]],"~$time->mins",["^ ","^T",null,"^U",["^ ","^V","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_com/input_time.cljs","^W",10,"^X",8,"^Y",10,"^Z",18,"^[",true,"^10",["^11",["^12",["^11",[["^1H"]]]]]],"^[",true,"^?","~$re-com.input-time/time->mins","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",18,"^16",["^11",[["^1H"]]],"^17",null,"^18",["^11",[null,null]],"^X",1,"^19",false,"^W",10,"^1:","^1;","^Y",10,"^1<",1,"^1=",true,"^10",["^11",["^12",["^11",[["^1H"]]]]]],"~$triple->time",["^ ","^T",null,"^U",["^ ","^V","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_com/input_time.cljs","^W",25,"^X",8,"^Y",25,"^Z",20,"^[",true,"^10",["^11",["^12",["^11",[[["~$hr","~$_","~$mi"]]]]]],"^14","Return a time integer from a triple int vector of form  [H  _  M]"],"^[",true,"^?","~$re-com.input-time/triple->time","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",20,"^16",["^11",[["~$p__38735"]]],"^17",null,"^18",["^11",[null,null]],"^X",1,"^19",false,"^W",25,"^1:","^1;","^Y",25,"^1<",1,"^1=",true,"^10",["^11",["^12",["^11",[[["^1T","~$_","^1U"]]]]]],"^14","Return a time integer from a triple int vector of form  [H  _  M]"],"~$valid-text?",["^ ","^T",null,"^U",["^ ","^V","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_com/input_time.cljs","^W",66,"^X",8,"^Y",66,"^Z",19,"^[",true,"^10",["^11",["^12",["^11",[["^13"]]]]],"^14","Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"],"^[",true,"^?","~$re-com.input-time/valid-text?","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",19,"^16",["^11",[["^13"]]],"^17",null,"^18",["^11",[null,null]],"^X",1,"^19",false,"^W",66,"^1:","^1J","^Y",66,"^1<",1,"^1=",true,"^10",["^11",["^12",["^11",[["^13"]]]]],"^14","Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"],"~$time->text",["^ ","^T",null,"^U",["^ ","^V","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_com/input_time.cljs","^W",59,"^X",8,"^Y",59,"^Z",18,"^[",true,"^10",["^11",["^12",["^11",[["^1H"]]]]],"^14","return a string of format HH:MM for 'time'"],"^[",true,"^?","~$re-com.input-time/time->text","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",18,"^16",["^11",[["^1H"]]],"^17",null,"^18",["^11",[null,null]],"^X",1,"^19",false,"^W",59,"^1:","^1E","^Y",59,"^1<",1,"^1=",true,"^10",["^11",["^12",["^11",[["^1H"]]]]],"^14","return a string of format HH:MM for 'time'"],"~$triple-seeking-re",["^ ","^U",["^ ","^V","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_com/input_time.cljs","^W",40,"^X",3,"^Y",40,"^Z",20,"^[",true],"^[",true,"^?","~$re-com.input-time/triple-seeking-re","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",20,"^X",1,"^W",39,"^Y",40,"^1M","^1E"],"~$on-new-keypress",["^ ","^T",null,"^U",["^ ","^V","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_com/input_time.cljs","^W",101,"^X",8,"^Y",101,"^Z",23,"^[",true,"^10",["^11",["^12",["^11",[["~$event","^1?"]]]]],"^14","Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"],"^[",true,"^?","~$re-com.input-time/on-new-keypress","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",23,"^16",["^11",[["^23","^1?"]]],"^17",null,"^18",["^11",[null,null]],"^X",1,"^19",false,"^W",101,"^1:",["^>",[null,"^1E","^1F"]],"^Y",101,"^1<",2,"^1=",true,"^10",["^11",["^12",["^11",[["^23","^1?"]]]]],"^14","Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"],"~$to-int",["^ ","^T",null,"^U",["^ ","^V","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_com/input_time.cljs","^W",19,"^X",8,"^Y",19,"^Z",14,"^[",true,"^10",["^11",["^12",["^11",[["~$s"]]]]],"^14","Parse the string 's' to a valid int. On parse failure, return 0"],"^[",true,"^?","~$re-com.input-time/to-int","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",14,"^16",["^11",[["~$s"]]],"^17",null,"^18",["^11",[null,null]],"^X",1,"^19",false,"^W",19,"^1:",["^>",["~$js","^1;"]],"^Y",19,"^1<",1,"^1=",true,"^10",["^11",["^12",["^11",[["~$s"]]]]],"^14","Parse the string 's' to a valid int. On parse failure, return 0"],"~$extract-triple-from-text",["^ ","^T",null,"^U",["^ ","^V","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_com/input_time.cljs","^W",42,"^X",8,"^Y",42,"^Z",32,"^[",true,"^10",["^11",["^12",["^11",[["^13"]]]]]],"^[",true,"^?","~$re-com.input-time/extract-triple-from-text","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",32,"^16",["^11",[["^13"]]],"^17",null,"^18",["^11",[null,null]],"^X",1,"^19",false,"^W",42,"^1:","^1E","^Y",42,"^1<",1,"^1=",true,"^10",["^11",["^12",["^11",[["^13"]]]]]],"~$validate-arg-times",["^ ","^T",null,"^U",["^ ","^V","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_com/input_time.cljs","^W",82,"^X",8,"^Y",82,"^Z",26,"^[",true,"^10",["^11",["^12",["^11",[["~$model","~$minimum","~$maximum"]]]]]],"^[",true,"^?","~$re-com.input-time/validate-arg-times","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",26,"^16",["^11",[["^2;","^2<","^2="]]],"^17",null,"^18",["^11",[null,null]],"^X",1,"^19",false,"^W",82,"^1:","^1J","^Y",82,"^1<",3,"^1=",true,"^10",["^11",["^12",["^11",[["^2;","^2<","^2="]]]]]],"~$force-valid-time",["^ ","^T",null,"^U",["^ ","^V","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_com/input_time.cljs","^W",90,"^X",8,"^Y",90,"^Z",24,"^[",true,"^10",["^11",["^12",["^11",[["^1H","^1@","^1A","~$previous"]]]]],"^14","Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"],"^[",true,"^?","~$re-com.input-time/force-valid-time","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",24,"^16",["^11",[["^1H","^1@","^1A","^2@"]]],"^17",null,"^18",["^11",[null,null]],"^X",1,"^19",false,"^W",90,"^Y",90,"^1<",4,"^1=",true,"^10",["^11",["^12",["^11",[["^1H","^1@","^1A","^2@"]]]]],"^14","Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"],"~$input-time",["^ ","^T",null,"^U",["^ ","^V","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_com/input_time.cljs","^W",141,"^X",7,"^Y",141,"^Z",17,"^10",["^11",["^12",["^11",[["~$&",["^ ","~:keys",["^2;","^2<","^2="],"~:as","~$args","~:or",["^ ","^2<",0,"^2=",2359]]]]]]],"^14","I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above","~:top-fn",["^ ","^19",true,"^1<",0,"^16",[["^11",[["^ ","^2C",["^2;","^2<","^2="],"^2D","^2E","^2F",["^ ","^2<",0,"^2=",2359]]]]],"^10",["^11",[["~$&",["^ ","^2C",["^2;","^2<","^2="],"^2D","^2E","^2F",["^ ","^2<",0,"^2=",2359]]]]],"^18",["^11",[null]]]],"^?","~$re-com.input-time/input-time","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",17,"^2G",["^ ","^19",true,"^1<",0,"^16",[["^11",[["^ ","^2C",["^2;","^2<","^2="],"^2D","^2E","^2F",["^ ","^2<",0,"^2=",2359]]]]],"^10",["^11",[["~$&",["^ ","^2C",["^2;","^2<","^2="],"^2D","^2E","^2F",["^ ","^2<",0,"^2=",2359]]]]],"^18",["^11",[null]]],"^16",[["^11",[["^ ","^2C",["^2;","^2<","^2="],"^2D","^2E","^2F",["^ ","^2<",0,"^2=",2359]]]]],"^17",null,"^18",["^11",[null]],"^X",1,"^19",true,"^W",141,"^1:","^1E","^Y",141,"^1<",0,"^1=",true,"^10",["^11",[["~$&",["^ ","^2C",["^2;","^2<","^2="],"^2D","^2E","^2F",["^ ","^2<",0,"^2=",2359]]]]],"^14","I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above"],"~$lose-focus-if-enter",["^ ","^T",null,"^U",["^ ","^V","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_com/input_time.cljs","^W",109,"^X",8,"^Y",109,"^Z",27,"^[",true,"^10",["^11",["^12",["^11",[["~$ev"]]]]],"^14","When Enter is pressed, force the component to lose focus"],"^[",true,"^?","~$re-com.input-time/lose-focus-if-enter","^V","resources/public/js/compiled/out/re_com/input_time.cljs","^Z",27,"^16",["^11",[["^2J"]]],"^17",null,"^18",["^11",[null,null]],"^X",1,"^19",false,"^W",109,"^1:",["^>",["^1J","^1F"]],"^Y",109,"^1<",1,"^1=",true,"^10",["^11",["^12",["^11",[["^2J"]]]]],"^14","When Enter is pressed, force the component to lose focus"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^<","^<","^C","^D","^D","^D","^:","^:"],"~:cljs.analyzer/constants",["^ ","~:seen",["^>",["~:description","~:children","~:div.time-icon","~:disabled","~:else","~:i.zmdi.zmdi-hc-fw-rc.zmdi-time","~:default","^?","~:value","~:maximum","~:hide-border?","~:width","~:on-blur","~:type","~:style","~:on-key-up","~:class","~:minimum","~:show-icon?","~:code","~:position","~:validate-fn","~:br","~:input","~:on-change","~:border","~:disabled?","~:required","~:height","~:span","~:margin","~:model","~:attr"]],"~:order",["^2T","^?","^3>","^30","^38","^2P","^3B","^3;","^2V","^34","^2X","^3=","^35","^2Y","^2Z","^3?","^33","^31","^3C","^3@","^36","^39","^3<","^2Q","^3:","^2W","^2S","^2[","^32","^2R","^2U","^37","^3A"]],"^14",null]