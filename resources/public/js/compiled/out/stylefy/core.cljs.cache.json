["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$console",["^ ","~$warn",["^ "]]],"~:use-macros",["^ ","~$run!","~$reagent.ratom"],"~:excludes",["~#set",[]],"~:name","~$stylefy.core","~:imports",null,"~:requires",["^ ","~$hashing","~$stylefy.impl.hashing","^@","^@","~$impl-styles","~$stylefy.impl.styles","^B","^B","~$dom","~$stylefy.impl.dom","^D","^D"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$tag",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/stylefy/core.cljs","~:line",154,"~:column",7,"~:end-line",154,"~:end-column",10,"~:arglists",["~#list",["~$quote",["^Q",[["~$name","~$properties"]]]]],"~:doc","Creates a CSS selector for the given tag and properties and adds it into the DOM asynchronously.\n\n   Normally you should let stylefy convert your style maps to unique CSS classes by calling\n   use-style, instead of creating tag selectors. However, custom tag styles\n   can be useful for setting styles on base elements, like html or body.\n\n   Example:\n   (stylefy/tag \"code\"\n                 {:background-color \"lightyellow\"})"],"^;","~$stylefy.core/tag","^K","resources/public/js/compiled/out/stylefy/core.cljs","^O",10,"~:method-params",["^Q",[["^S","^T"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^M",1,"~:variadic?",false,"^L",154,"~:ret-tag","~$cljs.core/IMap","^N",154,"~:max-fixed-arity",2,"~:fn-var",true,"^P",["^Q",["^R",["^Q",[["^S","^T"]]]]],"^U","Creates a CSS selector for the given tag and properties and adds it into the DOM asynchronously.\n\n   Normally you should let stylefy convert your style maps to unique CSS classes by calling\n   use-style, instead of creating tag selectors. However, custom tag styles\n   can be useful for setting styles on base elements, like html or body.\n\n   Example:\n   (stylefy/tag \"code\"\n                 {:background-color \"lightyellow\"})"],"~$prepare-styles",["^ ","^I",null,"^J",["^ ","^K","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/stylefy/core.cljs","^L",184,"^M",7,"^N",184,"^O",21,"^P",["^Q",["^R",["^Q",[["~$styles"]]]]],"^U","Converts the given styles and their sub-styles to CSS and adds them into the DOM\n   synchronously (immediately).\n\n   When you call use-style, the given style is converted to CSS and will\n   be added into the DOM asynchronously. Until then, the style is returned as inline style,\n   except if it cannot be present as inline style, in which case the style is going to be\n   hidden for a (very) short period of time. In most cases, this should not be a problem,\n   but if needed, styles can also be added into the DOM synchronously (immediately)\n   by calling this function. It is recommended to call this function during the\n   :component-will-mount lifecycle method. It makes sure the given styles are\n   completely ready to be used when the component needs them.\n\n   It's good to keep in mind that most of the time this function is not needed,\n   but calling use-style is enough."],"^;","~$stylefy.core/prepare-styles","^K","resources/public/js/compiled/out/stylefy/core.cljs","^O",21,"^W",["^Q",[["^14"]]],"^X",null,"^Y",["^Q",[null,null]],"^M",1,"^Z",false,"^L",184,"^[","~$any","^N",184,"^11",1,"^12",true,"^P",["^Q",["^R",["^Q",[["^14"]]]]],"^U","Converts the given styles and their sub-styles to CSS and adds them into the DOM\n   synchronously (immediately).\n\n   When you call use-style, the given style is converted to CSS and will\n   be added into the DOM asynchronously. Until then, the style is returned as inline style,\n   except if it cannot be present as inline style, in which case the style is going to be\n   hidden for a (very) short period of time. In most cases, this should not be a problem,\n   but if needed, styles can also be added into the DOM synchronously (immediately)\n   by calling this function. It is recommended to call this function during the\n   :component-will-mount lifecycle method. It makes sure the given styles are\n   completely ready to be used when the component needs them.\n\n   It's good to keep in mind that most of the time this function is not needed,\n   but calling use-style is enough."],"~$prepare-style",["^ ","^I",null,"^J",["^ ","^K","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/stylefy/core.cljs","^L",205,"^M",7,"^N",205,"^O",20,"^P",["^Q",["^R",["^Q",[["~$style"]]]]],"^U","Same as prepare-styles, but takes only one style map as a parameter, prepares it\n   and returns it. Can be used easily along with use-style: (use-style (prepare-style style)).\n\n   Since prepare-style works synchronously, it can become slow if called multiple times\n   during a single render. If this is the case, it is recommended to use prepare-styles\n   instead to prepare as many styles as possible at once."],"^;","~$stylefy.core/prepare-style","^K","resources/public/js/compiled/out/stylefy/core.cljs","^O",20,"^W",["^Q",[["^18"]]],"^X",null,"^Y",["^Q",[null,null]],"^M",1,"^Z",false,"^L",205,"^N",205,"^11",1,"^12",true,"^P",["^Q",["^R",["^Q",[["^18"]]]]],"^U","Same as prepare-styles, but takes only one style map as a parameter, prepares it\n   and returns it. Can be used easily along with use-style: (use-style (prepare-style style)).\n\n   Since prepare-style works synchronously, it can become slow if called multiple times\n   during a single render. If this is the case, it is recommended to use prepare-styles\n   instead to prepare as many styles as possible at once."],"~$init",["^ ","^I",null,"^J",["^ ","^K","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/stylefy/core.cljs","^L",89,"^M",7,"^N",89,"^O",11,"^P",["^Q",["^R",["^Q",[[],["~$options"]]]]],"^U","Initialises stylefy.\n\n  The following options are supported:\n    :use-caching?             If true, caches the generated CSS code using localstorage\n                              so that future page loads work faster. Defaults to true since version 1.7.0.\n                              Also check :cache-options.\n    :cache-options            A map which can contain the following keywords:\n      :expires                Number of seconds after the cache is cleared automatically.\n                              For example, value 604800 clears the cache after one week.\n                              By default, the cache is never cleared automatically.\n                              You can also clear the cache manually by calling stylefy.cache/clear.\n    :global-vendor-prefixes   A map containing a set of ::stylefy/vendors and ::stylefy/auto-prefix properties.\n                              These properties are globally prefixed in all stylefy style maps.\n    :use-custom-class-prefix? If set to true, custom class prefix is used if the style map contains it.\n                              By default, this is set to false.\n                              It is recommended to set this to true only in development / test environment.\n    :multi-instance           Provides support for multiple stylefy instances.\n                              This can be used if you need to run multiple SPA applications\n                              on the same page and at least two of them are using stylefy.\n      :base-node              Base node where this instance's <style> tags are queried. Not required.\n      :instance-id            Unique string (for example app name). This is used as suffix for stylefy's <style> tags\n                              so make sure you name each instance's <style> tags correctly. For example:\n                              <style id=\"_stylefy-styles_myapp\">\n                              <style id=\"_stylefy-constant-styles_myapp\">\n                              This value is also used as suffix in caching.","~:top-fn",["^ ","^Z",false,"^11",1,"^W",["^Q",[[],["^1;"]]],"^P",["^Q",[[],["^1;"]]],"^Y",["^Q",[null,null]]]],"^;","~$stylefy.core/init","^K","resources/public/js/compiled/out/stylefy/core.cljs","^O",11,"^1<",["^ ","^Z",false,"^11",1,"^W",["^Q",[[],["^1;"]]],"^P",["^Q",[[],["^1;"]]],"^Y",["^Q",[null,null]]],"^W",["^Q",[[],["^1;"]]],"^X",null,"^Y",["^Q",[null,null]],"^M",1,"^Z",false,"^L",89,"^N",89,"^11",1,"^12",true,"^P",["^Q",[[],["^1;"]]],"^U","Initialises stylefy.\n\n  The following options are supported:\n    :use-caching?             If true, caches the generated CSS code using localstorage\n                              so that future page loads work faster. Defaults to true since version 1.7.0.\n                              Also check :cache-options.\n    :cache-options            A map which can contain the following keywords:\n      :expires                Number of seconds after the cache is cleared automatically.\n                              For example, value 604800 clears the cache after one week.\n                              By default, the cache is never cleared automatically.\n                              You can also clear the cache manually by calling stylefy.cache/clear.\n    :global-vendor-prefixes   A map containing a set of ::stylefy/vendors and ::stylefy/auto-prefix properties.\n                              These properties are globally prefixed in all stylefy style maps.\n    :use-custom-class-prefix? If set to true, custom class prefix is used if the style map contains it.\n                              By default, this is set to false.\n                              It is recommended to set this to true only in development / test environment.\n    :multi-instance           Provides support for multiple stylefy instances.\n                              This can be used if you need to run multiple SPA applications\n                              on the same page and at least two of them are using stylefy.\n      :base-node              Base node where this instance's <style> tags are queried. Not required.\n      :instance-id            Unique string (for example app name). This is used as suffix for stylefy's <style> tags\n                              so make sure you name each instance's <style> tags correctly. For example:\n                              <style id=\"_stylefy-styles_myapp\">\n                              <style id=\"_stylefy-constant-styles_myapp\">\n                              This value is also used as suffix in caching."],"~$use-style",["^ ","^I",null,"^J",["^ ","^K","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/stylefy/core.cljs","^L",7,"^M",7,"^N",7,"^O",16,"^P",["^Q",["^R",["^Q",[["^18"],["^18","^1;"]]]]],"^U","Defines a style for a component by converting the given style map in to an unique CSS class,\n   and returning a pointer (a map with :class keyword) to it so that the component can use it.\n   To keep the rendering process fast, use-style works asynchronously, meaning that it\n   does not add the generated CSS class into the DOM immediately, but very soon instead.\n   If the style has not been added into the DOM yet, it returns the given props as inline style,\n   so that the component looks good even if CSS class has not been generated yet.\n\n   Important exception: if the style contains specific modes or media query definitions,\n   which cannot be used as inline style, {:style {:visibility \"hidden\"}} is returned.\n   Thus, the component is going to be hidden for a few milliseconds.\n   In most cases, this is not a problem, but if you want to avoid it, see prepare-styles function.\n\n   The given 'style' parameter is a map which contains CSS style properties\n   (as supported by Garden library). There can also be special namespaced keywords\n   along with the style definitions. These are:\n\n   Core features:\n\n   ::sub-styles        Makes it possible to define a named style map inside of the main style map.\n                       The contents of ::sub-styles should be a map, in which keys define the name of\n                       the sub-style and values contain the style properties.\n                       Sub-styles are nothing special, they are supposed to contain the same contents\n                       as the main style map. ::sub-styles helps you to define styles that are closely\n                       related to the main style map but do not deserve their own 'def'.\n   ::mode              A map in which keys are mode names and values are style properties.\n                       Internally all modes are converted to CSS pseudoclasses or pseudoelements.\n                       You can use any mode name that is a valid CSS speudoclass.\n   ::media             A map in which keys are maps presenting CSS media query definitions, and values\n                       are style maps which are used when the media query is active.\n                       Vendor prefixes and modes can be used inside the media query style map.\n   ::supports          A map in which keys are strings presenting CSS feature query definitions, and values\n                       are style maps which are used when the supports query is active.\n                       Vendor prefixes, media queries and modes can be used inside the support query style map.\n   ::vendors           A vector of vendor prefixes that are used with ::auto-prefix.\n   ::auto-prefix       A set of style properties that should be prefixed with ::vendors.\n   ::with-classes      A collection of additional class names that should always be used with\n                       this style definition.\n\n   Additional features:\n\n   ::class-prefix      Custom prefix for generated class names. If not given, the default prefix will be used.\n                       Custom prefix can be used for debugging and automatic software testing purposes.\n                       Note that you need to set custom class prefixes on in the init function.\n   ::manual            Manual mode can be used to style child elements with manually written CSS selectors\n                       using Garden syntax. It should be used only for styling 3rd party components and\n                       resolving corner cases in which complex CSS selectors are needed.\n                       For the most part, it is recommended to use ::sub-styles.\n\n   Options is an optional map, which contains HTML attributes (:class, :href, :src etc.).\n   It can also contain the following special keywords features:\n\n   ::with-classes       DEPRECATED. A vector of additional class names used with the current style.\n                        Deprecated since version 1.3.0: The options map can now contain\n                        any HTML attributes. Thus, you can just use :class instead of ::with-classes.","^1<",["^ ","^Z",false,"^11",2,"^W",["^Q",[["^18"],["^18","^1;"]]],"^P",["^Q",[["^18"],["^18","^1;"]]],"^Y",["^Q",[null,null]]]],"^;","~$stylefy.core/use-style","^K","resources/public/js/compiled/out/stylefy/core.cljs","^O",16,"^1<",["^ ","^Z",false,"^11",2,"^W",["^Q",[["^18"],["^18","^1;"]]],"^P",["^Q",[["^18"],["^18","^1;"]]],"^Y",["^Q",[null,null]]],"^W",["^Q",[["^18"],["^18","^1;"]]],"^X",null,"^Y",["^Q",[null,null]],"^M",1,"^Z",false,"^L",7,"^N",7,"^11",2,"^12",true,"^P",["^Q",[["^18"],["^18","^1;"]]],"^U","Defines a style for a component by converting the given style map in to an unique CSS class,\n   and returning a pointer (a map with :class keyword) to it so that the component can use it.\n   To keep the rendering process fast, use-style works asynchronously, meaning that it\n   does not add the generated CSS class into the DOM immediately, but very soon instead.\n   If the style has not been added into the DOM yet, it returns the given props as inline style,\n   so that the component looks good even if CSS class has not been generated yet.\n\n   Important exception: if the style contains specific modes or media query definitions,\n   which cannot be used as inline style, {:style {:visibility \"hidden\"}} is returned.\n   Thus, the component is going to be hidden for a few milliseconds.\n   In most cases, this is not a problem, but if you want to avoid it, see prepare-styles function.\n\n   The given 'style' parameter is a map which contains CSS style properties\n   (as supported by Garden library). There can also be special namespaced keywords\n   along with the style definitions. These are:\n\n   Core features:\n\n   ::sub-styles        Makes it possible to define a named style map inside of the main style map.\n                       The contents of ::sub-styles should be a map, in which keys define the name of\n                       the sub-style and values contain the style properties.\n                       Sub-styles are nothing special, they are supposed to contain the same contents\n                       as the main style map. ::sub-styles helps you to define styles that are closely\n                       related to the main style map but do not deserve their own 'def'.\n   ::mode              A map in which keys are mode names and values are style properties.\n                       Internally all modes are converted to CSS pseudoclasses or pseudoelements.\n                       You can use any mode name that is a valid CSS speudoclass.\n   ::media             A map in which keys are maps presenting CSS media query definitions, and values\n                       are style maps which are used when the media query is active.\n                       Vendor prefixes and modes can be used inside the media query style map.\n   ::supports          A map in which keys are strings presenting CSS feature query definitions, and values\n                       are style maps which are used when the supports query is active.\n                       Vendor prefixes, media queries and modes can be used inside the support query style map.\n   ::vendors           A vector of vendor prefixes that are used with ::auto-prefix.\n   ::auto-prefix       A set of style properties that should be prefixed with ::vendors.\n   ::with-classes      A collection of additional class names that should always be used with\n                       this style definition.\n\n   Additional features:\n\n   ::class-prefix      Custom prefix for generated class names. If not given, the default prefix will be used.\n                       Custom prefix can be used for debugging and automatic software testing purposes.\n                       Note that you need to set custom class prefixes on in the init function.\n   ::manual            Manual mode can be used to style child elements with manually written CSS selectors\n                       using Garden syntax. It should be used only for styling 3rd party components and\n                       resolving corner cases in which complex CSS selectors are needed.\n                       For the most part, it is recommended to use ::sub-styles.\n\n   Options is an optional map, which contains HTML attributes (:class, :href, :src etc.).\n   It can also contain the following special keywords features:\n\n   ::with-classes       DEPRECATED. A vector of additional class names used with the current style.\n                        Deprecated since version 1.3.0: The options map can now contain\n                        any HTML attributes. Thus, you can just use :class instead of ::with-classes."],"~$font-face",["^ ","^I",null,"^J",["^ ","^K","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/stylefy/core.cljs","^L",141,"^M",7,"^N",141,"^O",16,"^P",["^Q",["^R",["^Q",[["^T"]]]]],"^U","Adds the given font-face definition into the DOM asynchronously.\n   Properties are given in the same form as Garden accepts them.\n\n   Example:\n   (stylefy/font-face {:font-family \"open_sans\"\n                       :src \"url('../fonts/OpenSans-Regular-webfont.woff') format('woff')\"\n                       :font-weight \"normal\"\n                       :font-style \"normal\"})"],"^;","~$stylefy.core/font-face","^K","resources/public/js/compiled/out/stylefy/core.cljs","^O",16,"^W",["^Q",[["^T"]]],"^X",null,"^Y",["^Q",[null,null]],"^M",1,"^Z",false,"^L",141,"^[","^16","^N",141,"^11",1,"^12",true,"^P",["^Q",["^R",["^Q",[["^T"]]]]],"^U","Adds the given font-face definition into the DOM asynchronously.\n   Properties are given in the same form as Garden accepts them.\n\n   Example:\n   (stylefy/font-face {:font-family \"open_sans\"\n                       :src \"url('../fonts/OpenSans-Regular-webfont.woff') format('woff')\"\n                       :font-weight \"normal\"\n                       :font-style \"normal\"})"],"~$use-sub-style",["^ ","^I",null,"^J",["^ ","^K","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/stylefy/core.cljs","^L",68,"^M",7,"^N",68,"^O",20,"^P",["^Q",["^R",["^Q",[["^18","~$sub-style"],["^18","^1C","^1;"]]]]],"^U","Defines style for a component using sub-style.\n\n   The style and options are the same as you would use with use-style.\n   sub-style is the name of the sub-stale in the given style map.\n\n   If you have a deeper sub-style nesting, ie. you want to get a sub-style from sub-style,\n   take a look at sub-style function.","^1<",["^ ","^Z",false,"^11",3,"^W",["^Q",[["^18","^1C"],["^18","^1C","^1;"]]],"^P",["^Q",[["^18","^1C"],["^18","^1C","^1;"]]],"^Y",["^Q",[null,null]]]],"^;","~$stylefy.core/use-sub-style","^K","resources/public/js/compiled/out/stylefy/core.cljs","^O",20,"^1<",["^ ","^Z",false,"^11",3,"^W",["^Q",[["^18","^1C"],["^18","^1C","^1;"]]],"^P",["^Q",[["^18","^1C"],["^18","^1C","^1;"]]],"^Y",["^Q",[null,null]]],"^W",["^Q",[["^18","^1C"],["^18","^1C","^1;"]]],"^X",null,"^Y",["^Q",[null,null]],"^M",1,"^Z",false,"^L",68,"^N",68,"^11",3,"^12",true,"^P",["^Q",[["^18","^1C"],["^18","^1C","^1;"]]],"^U","Defines style for a component using sub-style.\n\n   The style and options are the same as you would use with use-style.\n   sub-style is the name of the sub-stale in the given style map.\n\n   If you have a deeper sub-style nesting, ie. you want to get a sub-style from sub-style,\n   take a look at sub-style function."],"^1C",["^ ","^I",null,"^J",["^ ","^K","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/stylefy/core.cljs","^L",83,"^M",7,"^N",83,"^O",16,"^P",["^Q",["^R",["^Q",[["^18","~$&","~$sub-styles"]]]]],"^U","Returns sub-style for a given style.","^1<",["^ ","^Z",true,"^11",1,"^W",[["^Q",["^18","^1E"]]],"^P",["^Q",[["^18","~$&","^1E"]]],"^Y",["^Q",[null]]]],"^;","~$stylefy.core/sub-style","^K","resources/public/js/compiled/out/stylefy/core.cljs","^O",16,"^1<",["^ ","^Z",true,"^11",1,"^W",[["^Q",["^18","^1E"]]],"^P",["^Q",[["^18","~$&","^1E"]]],"^Y",["^Q",[null]]],"^W",[["^Q",["^18","^1E"]]],"^X",null,"^Y",["^Q",[null]],"^M",1,"^Z",true,"^L",83,"^[","^16","^N",83,"^11",1,"^12",true,"^P",["^Q",[["^18","~$&","^1E"]]],"^U","Returns sub-style for a given style."],"~$keyframes",["^ ","^I",null,"^J",["^ ","^K","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/stylefy/core.cljs","^L",126,"^M",7,"^N",126,"^O",16,"^P",["^Q",["^R",["^Q",[["~$identifier","~$&","~$frames"]]]]],"^U","Adds the given keyframe definition into the DOM asynchronously.\n   Identifier is the name of the keyframes.\n   Frames are given in the same form as Garden accepts them.\n\n   Example:\n   (stylefy/keyframes \"simple-animation\"\n                       [:from\n                        {:opacity 0}]\n                       [:to\n                        {:opacity 1}])","^1<",["^ ","^Z",true,"^11",1,"^W",[["^Q",["^1H","^1I"]]],"^P",["^Q",[["^1H","~$&","^1I"]]],"^Y",["^Q",[null]]]],"^;","~$stylefy.core/keyframes","^K","resources/public/js/compiled/out/stylefy/core.cljs","^O",16,"^1<",["^ ","^Z",true,"^11",1,"^W",[["^Q",["^1H","^1I"]]],"^P",["^Q",[["^1H","~$&","^1I"]]],"^Y",["^Q",[null]]],"^W",[["^Q",["^1H","^1I"]]],"^X",null,"^Y",["^Q",[null]],"^M",1,"^Z",true,"^L",126,"^[","^16","^N",126,"^11",1,"^12",true,"^P",["^Q",[["^1H","~$&","^1I"]]],"^U","Adds the given keyframe definition into the DOM asynchronously.\n   Identifier is the name of the keyframes.\n   Frames are given in the same form as Garden accepts them.\n\n   Example:\n   (stylefy/keyframes \"simple-animation\"\n                       [:from\n                        {:opacity 0}]\n                       [:to\n                        {:opacity 1}])"],"~$class",["^ ","^I",null,"^J",["^ ","^K","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/stylefy/core.cljs","^L",169,"^M",7,"^N",169,"^O",12,"^P",["^Q",["^R",["^Q",[["^S","^T"]]]]],"^U","Creates a CSS class with the given name and properties and adds it into the DOM asynchronously.\n\n   Normally you should let stylefy convert your style maps to unique CSS classes by calling\n   use-style. Thus, there is usually no need to create customly named classes when using stylefy,\n   unless you work with some 3rd party framework.\n\n   Example:\n   (stylefy/class \"enter-transition\"\n                   {:transition \"background-color 2s\"})"],"^;","~$stylefy.core/class","^K","resources/public/js/compiled/out/stylefy/core.cljs","^O",12,"^W",["^Q",[["^S","^T"]]],"^X",null,"^Y",["^Q",[null,null]],"^M",1,"^Z",false,"^L",169,"^[","^10","^N",169,"^11",2,"^12",true,"^P",["^Q",["^R",["^Q",[["^S","^T"]]]]],"^U","Creates a CSS class with the given name and properties and adds it into the DOM asynchronously.\n\n   Normally you should let stylefy convert your style maps to unique CSS classes by calling\n   use-style. Thus, there is usually no need to create customly named classes when using stylefy,\n   unless you work with some 3rd party framework.\n\n   Example:\n   (stylefy/class \"enter-transition\"\n                   {:transition \"background-color 2s\"})"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^8","^8"],"^U",null]