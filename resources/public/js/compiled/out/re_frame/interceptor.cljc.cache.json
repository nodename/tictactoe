["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^;","~$re-frame.interop","^<","~$set","~$clojure.set","^>","^>"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$console","^;","~$empty-queue","^<","~$debug-enabled?","^<"],"~:defs",["^ ","~$invoke-interceptors",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_frame/interceptor.cljc","~:line",71,"~:column",8,"~:end-line",71,"~:end-column",27,"~:private",true,"~:arglists",["~#list",["~$quote",["^O",[["~$context","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^M",true,"^7","~$re-frame.interceptor/invoke-interceptors","^H","resources/public/js/compiled/out/re_frame/interceptor.cljc","^L",27,"~:method-params",["^O",[["^Q","^R"]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^J",1,"~:variadic?",false,"^I",71,"^K",71,"~:max-fixed-arity",2,"~:fn-var",true,"^N",["^O",["^P",["^O",[["^Q","^R"]]]]],"^S","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^F",null,"^G",["^ ","^H","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_frame/interceptor.cljc","^I",53,"^J",7,"^K",53,"^L",21,"^N",["^O",["^P",["^O",[["^Q","~$key","~$value"]]]]]],"^7","~$re-frame.interceptor/assoc-coeffect","^H","resources/public/js/compiled/out/re_frame/interceptor.cljc","^L",21,"^U",["^O",[["^Q","^10","^11"]]],"^V",null,"^W",["^O",[null,null]],"^J",1,"^X",false,"^I",53,"~:ret-tag","~$any","^K",53,"^Y",3,"^Z",true,"^N",["^O",["^P",["^O",[["^Q","^10","^11"]]]]]],"~$update-coeffect",["^ ","^F",null,"^G",["^ ","^H","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_frame/interceptor.cljc","^I",57,"^J",7,"^K",57,"^L",22,"^N",["^O",["^P",["^O",[["^Q","^10","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","^X",true,"^Y",3,"^U",[["^O",["^Q","^10","~$f","^16"]]],"^N",["^O",[["^Q","^10","~$f","~$&","^16"]]],"^W",["^O",[null]]]],"^7","~$re-frame.interceptor/update-coeffect","^H","resources/public/js/compiled/out/re_frame/interceptor.cljc","^L",22,"^17",["^ ","^X",true,"^Y",3,"^U",[["^O",["^Q","^10","~$f","^16"]]],"^N",["^O",[["^Q","^10","~$f","~$&","^16"]]],"^W",["^O",[null]]],"^U",[["^O",["^Q","^10","~$f","^16"]]],"^V",null,"^W",["^O",[null]],"^J",1,"^X",true,"^I",57,"^13","^14","^K",57,"^Y",3,"^Z",true,"^N",["^O",[["^Q","^10","~$f","~$&","^16"]]]],"~$invoke-interceptor-fn",["^ ","^F",null,"^G",["^ ","^H","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_frame/interceptor.cljc","^I",64,"^J",8,"^K",64,"^L",29,"^M",true,"^N",["^O",["^P",["^O",[["^Q","~$interceptor","^R"]]]]]],"^M",true,"^7","~$re-frame.interceptor/invoke-interceptor-fn","^H","resources/public/js/compiled/out/re_frame/interceptor.cljc","^L",29,"^U",["^O",[["^Q","^1:","^R"]]],"^V",null,"^W",["^O",[null,null]],"^J",1,"^X",false,"^I",64,"^13",["^6",[null,"^14"]],"^K",64,"^Y",3,"^Z",true,"^N",["^O",["^P",["^O",[["^Q","^1:","^R"]]]]]],"~$get-effect",["^ ","^F",null,"^G",["^ ","^H","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_frame/interceptor.cljc","^I",30,"^J",7,"^K",30,"^L",17,"^N",["^O",["^P",["^O",[["^Q"],["^Q","^10"],["^Q","^10","~$not-found"]]]]],"^17",["^ ","^X",false,"^Y",3,"^U",["^O",[["^Q"],["^Q","^10"],["^Q","^10","^1="]]],"^N",["^O",[["^Q"],["^Q","^10"],["^Q","^10","^1="]]],"^W",["^O",[null,null,null]]]],"^7","~$re-frame.interceptor/get-effect","^H","resources/public/js/compiled/out/re_frame/interceptor.cljc","^L",17,"^17",["^ ","^X",false,"^Y",3,"^U",["^O",[["^Q"],["^Q","^10"],["^Q","^10","^1="]]],"^N",["^O",[["^Q"],["^Q","^10"],["^Q","^10","^1="]]],"^W",["^O",[null,null,null]]],"^U",["^O",[["^Q"],["^Q","^10"],["^Q","^10","^1="]]],"^V",null,"^W",["^O",[null,null,null]],"^J",1,"^X",false,"^I",30,"^K",30,"^Y",3,"^Z",true,"^N",["^O",[["^Q"],["^Q","^10"],["^Q","^10","^1="]]]],"~$->interceptor",["^ ","^F",null,"^G",["^ ","^H","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_frame/interceptor.cljc","^I",16,"^J",7,"^K",16,"^L",20,"^N",["^O",["^P",["^O",[["~$&",["^ ","~:as","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^S","Create an interceptor from named arguments","^17",["^ ","^X",true,"^Y",0,"^U",[["^O",[["^ ","^1@","~$m","^1A",["^1B","^1C","^1D"]]]]],"^N",["^O",[["~$&",["^ ","^1@","~$m","^1A",["^1B","^1C","^1D"]]]]],"^W",["^O",[null]]]],"^7","~$re-frame.interceptor/->interceptor","^H","resources/public/js/compiled/out/re_frame/interceptor.cljc","^L",20,"^17",["^ ","^X",true,"^Y",0,"^U",[["^O",[["^ ","^1@","~$m","^1A",["^1B","^1C","^1D"]]]]],"^N",["^O",[["~$&",["^ ","^1@","~$m","^1A",["^1B","^1C","^1D"]]]]],"^W",["^O",[null]]],"^U",[["^O",[["^ ","^1@","~$m","^1A",["^1B","^1C","^1D"]]]]],"^V",null,"^W",["^O",[null]],"^J",1,"^X",true,"^I",16,"^13","^14","^K",16,"^Y",0,"^Z",true,"^N",["^O",[["~$&",["^ ","^1@","~$m","^1A",["^1B","^1C","^1D"]]]]],"^S","Create an interceptor from named arguments"],"~$get-coeffect",["^ ","^F",null,"^G",["^ ","^H","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_frame/interceptor.cljc","^I",45,"^J",7,"^K",45,"^L",19,"^N",["^O",["^P",["^O",[["^Q"],["^Q","^10"],["^Q","^10","^1="]]]]],"^17",["^ ","^X",false,"^Y",3,"^U",["^O",[["^Q"],["^Q","^10"],["^Q","^10","^1="]]],"^N",["^O",[["^Q"],["^Q","^10"],["^Q","^10","^1="]]],"^W",["^O",[null,null,null]]]],"^7","~$re-frame.interceptor/get-coeffect","^H","resources/public/js/compiled/out/re_frame/interceptor.cljc","^L",19,"^17",["^ ","^X",false,"^Y",3,"^U",["^O",[["^Q"],["^Q","^10"],["^Q","^10","^1="]]],"^N",["^O",[["^Q"],["^Q","^10"],["^Q","^10","^1="]]],"^W",["^O",[null,null,null]]],"^U",["^O",[["^Q"],["^Q","^10"],["^Q","^10","^1="]]],"^V",null,"^W",["^O",[null,null,null]],"^J",1,"^X",false,"^I",45,"^K",45,"^Y",3,"^Z",true,"^N",["^O",[["^Q"],["^Q","^10"],["^Q","^10","^1="]]]],"~$execute",["^ ","^F",null,"^G",["^ ","^H","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_frame/interceptor.cljc","^I",145,"^J",7,"^K",145,"^L",14,"^N",["^O",["^P",["^O",[["~$event-v","~$interceptors"]]]]],"^S","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^7","~$re-frame.interceptor/execute","^H","resources/public/js/compiled/out/re_frame/interceptor.cljc","^L",14,"^U",["^O",[["^1I","^1J"]]],"^V",null,"^W",["^O",[null,null]],"^J",1,"^X",false,"^I",145,"^13","^14","^K",145,"^Y",2,"^Z",true,"^N",["^O",["^P",["^O",[["^1I","^1J"]]]]],"^S","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^F",null,"^G",["^ ","^H","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_frame/interceptor.cljc","^I",39,"^J",7,"^K",39,"^L",19,"^N",["^O",["^P",["^O",[["^Q","^10","^11"]]]]]],"^7","~$re-frame.interceptor/assoc-effect","^H","resources/public/js/compiled/out/re_frame/interceptor.cljc","^L",19,"^U",["^O",[["^Q","^10","^11"]]],"^V",null,"^W",["^O",[null,null]],"^J",1,"^X",false,"^I",39,"^13","^14","^K",39,"^Y",3,"^Z",true,"^N",["^O",["^P",["^O",[["^Q","^10","^11"]]]]]],"~$enqueue",["^ ","^F",null,"^G",["^ ","^H","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_frame/interceptor.cljc","^I",108,"^J",7,"^K",108,"^L",14,"^N",["^O",["^P",["^O",[["^Q","^1J"]]]]],"^S","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^7","~$re-frame.interceptor/enqueue","^H","resources/public/js/compiled/out/re_frame/interceptor.cljc","^L",14,"^U",["^O",[["^Q","^1J"]]],"^V",null,"^W",["^O",[null,null]],"^J",1,"^X",false,"^I",108,"^13","^14","^K",108,"^Y",2,"^Z",true,"^N",["^O",["^P",["^O",[["^Q","^1J"]]]]],"^S","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"~$mandatory-interceptor-keys",["^ ","^7","~$re-frame.interceptor/mandatory-interceptor-keys","^H","resources/public/js/compiled/out/re_frame/interceptor.cljc","^I",8,"^J",1,"^K",8,"^L",32,"^G",["^ ","^H","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_frame/interceptor.cljc","^I",8,"^J",6,"^K",8,"^L",32],"~:tag","~$cljs.core/ISet"],"~$interceptor?",["^ ","^F",null,"^G",["^ ","^H","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_frame/interceptor.cljc","^I",10,"^J",7,"^K",10,"^L",19,"^N",["^O",["^P",["^O",[["~$m"]]]]]],"^7","~$re-frame.interceptor/interceptor?","^H","resources/public/js/compiled/out/re_frame/interceptor.cljc","^L",19,"^U",["^O",[["~$m"]]],"^V",null,"^W",["^O",[null,null]],"^J",1,"^X",false,"^I",10,"^13","~$boolean","^K",10,"^Y",1,"^Z",true,"^N",["^O",["^P",["^O",[["~$m"]]]]]],"~$change-direction",["^ ","^F",null,"^G",["^ ","^H","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_frame/interceptor.cljc","^I",131,"^J",8,"^K",131,"^L",24,"^M",true,"^N",["^O",["^P",["^O",[["^Q"]]]]],"^S","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^M",true,"^7","~$re-frame.interceptor/change-direction","^H","resources/public/js/compiled/out/re_frame/interceptor.cljc","^L",24,"^U",["^O",[["^Q"]]],"^V",null,"^W",["^O",[null,null]],"^J",1,"^X",false,"^I",131,"^13","^14","^K",131,"^Y",1,"^Z",true,"^N",["^O",["^P",["^O",[["^Q"]]]]],"^S","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^Q",["^ ","^F",null,"^G",["^ ","^M",true,"^H","/Users/alan/Workspaces/tictactoe/resources/public/js/compiled/out/re_frame/interceptor.cljc","^L",15,"^17",["^ ","^X",false,"^Y",3,"^U",["^O",[["~$event","^1J"],["^1Y","^1J","~$db"]]],"^N",["^O",[["^1Y","^1J"],["^1Y","^1J","^1Z"]]],"^W",["^O",[null,null]]],"^J",8,"^I",120,"^K",120,"^N",["^O",["^P",["^O",[["^1Y","^1J"],["^1Y","^1J","^1Z"]]]]],"^S","Create a fresh context"],"^M",true,"^7","~$re-frame.interceptor/context","^H","resources/public/js/compiled/out/re_frame/interceptor.cljc","^L",15,"^17",["^ ","^X",false,"^Y",3,"^U",["^O",[["^1Y","^1J"],["^1Y","^1J","^1Z"]]],"^N",["^O",[["^1Y","^1J"],["^1Y","^1J","^1Z"]]],"^W",["^O",[null,null]]],"^U",["^O",[["^1Y","^1J"],["^1Y","^1J","^1Z"]]],"^V",null,"^W",["^O",[null,null]],"^J",1,"^X",false,"^I",120,"^K",120,"^Y",3,"^Z",true,"^N",["^O",[["^1Y","^1J"],["^1Y","^1J","^1Z"]]],"^S","Create a fresh context"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:unnamed","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:before"]],"~:order",["^28","^29","^2>","^2<","^24","^2:","^2=","^26","^2;","^27","^25"]],"^S",null]