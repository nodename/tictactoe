1590530532358:(def initial-board [[nil nil nil]\n                                        [nil nil nil]\n                                        [nil nil nil]])
1590530557354:(apply-turn initial-board :X [0 0])
1590530567674:(defn apply-turn [initial-board player [x y]]\n    (assoc-in initial-board [y x] player))
1590530572394:(apply-turn initial-board :X [0 0])
1590543960954::cljs/quit
1590630002385:(defn neighbors [[x y]]\n    (for [dx [-1 0 1]\n                  dy [-1 0 1]\n                  :let [newx (+ x dx)\n                                      newy (+ y dy)]\n                  :when (and (>= newx 0)\n                                                (<= newx 2)\n                                                (>= newy 0)\n                                                (<= newy 2))]\n          [newx newy]))
1590630013860:(neighbors [0 1])
1590630104481:(defn neighbors [[x y]]\n    (for [dx [-1 0 1]\n                  dy [-1 0 1]\n                  :let [newx (+ x dx)\n                                      newy (+ y dy)]\n                  :when (and (>= newx 0)\n                                                (<= newx 2)\n                                                (>= newy 0)\n                                                (<= newy 2)\n                                                (not= [newx newy] [x y]))]\n          [newx newy]))
1590630120968:(neighbors [0 1])
1590636985147:(defn rows []\n    (for [x [0 1 2]]\n          [[x 0] [x 1] [x 2]]))
1590636991002:(rows)
1590637100037:(defn rows []\n    (for [x [0 1 2]]\n          (for [y [0 1 2]]\n                  [[x y]])))
1590637104677:rows()
1590637138885:(defn rows []\n    (for [x [0 1 2]]\n          (for [y [0 1 2]]\n                  [x y])))
1590637142931:rows()
1590637148115:(rows)
1590637266376:(defn cols []\n    (for [y [0 1 2]]\n          (for [x [0 1 2]]\n                  [x y])))
1590637269591:(cols)
1590637584460:(defn diags []\n    (concat (for [x [0 1 2]]\n                          [x x])\n                      (for [x [0 1 2]]\n                                    [x (- 2 x)])))
1590637594362:(diags)
1590637674217:(defn diags []\n    (cons (for [x [0 1 2]]\n                        [x x])\n                    (for [x [0 1 2]]\n                                  [x (- 2 x)])))
1590637678407:(diags)
1590637750992:(defn diags []\n    (cons (for [x [0 1 2]]\n                        [x x])\n                    [(for [x [0 1 2]]\n                                   [x (- 2 x)])]))
1590637754924:(diags)
1590637856835:(def cols\n    (for [x [0 1 2]]\n          (for [y [0 1 2]]\n                  [x y])))
1590637857012:(def rows\n    (for [y [0 1 2]]\n          (for [x [0 1 2]]\n                  [x y])))
1590637857423:(def diags\n    (cons (for [x [0 1 2]]\n                        [x x])\n                    [(for [x [0 1 2]]\n                                   [x (- 2 x)])]))
1590637858816:(def lines [cols rows diags])
1590637862383:lines
1590637914790:(def lines (cons cols rows diags))
1590637941632:(def lines (concat cols rows diags))
1590637944340:lines
1590638141550:(defn contents [board line]\n    (for [sq line]\n          sq))
1590638170581:(contents '([0 0] [0 1] [0 2]))
1590640426865:(map-indexed vector [:x :o nil])
1590640524989:(frquencies [:X :X nil])
1590640547748:(frequencies [:X :X nil])
1590640580235:(get (frequencies [:X :X nil]) nil)
1590645274679:(def cols\n    (for [x [0 1 2]]\n          (for [y [0 1 2]]\n                  [x y])))
1590645274882:(def rows\n    (for [y [0 1 2]]\n          (for [x [0 1 2]]\n                  [x y])))
1590645275283:(def diags\n    (cons (for [x [0 1 2]]\n                      [x x])\n                  [(for [x [0 1 2]]\n                                [x (- 2 x)])]))
1590645276217:(def all-lines (concat cols rows diags))
1590645325727:(defn intersection [line0 line1]\n    (intersection (set line0) (set line1)))
1590645334166:all-lines
1590645402477:(intersection '([0 0] [0 1] [0 2]) ' ([0 0] [1 0] [2 0]))
1590645416500:(intersection '([0 0] [0 1] [0 2]) '([0 0] [1 0] [2 0]))
1590645460066:(set '([0 0] [0 1] [0 2]))
1590645507456:(set '([0 1] [1 1] [2 1]))
1590645540415:(defn intersection [line0 line1]\n    (clojure.set/intersection (set line0) (set line1)))
1590645554143:(intersection '([0 0] [0 1] [0 2]) '([0 0] [1 0] [2 0]))
1590696861718:(def all-squares\n    (for [x [0 1 2]\n                  y [0 1 2]]\n          [x y]))
1590696866259:all-squares
1590700592955:all-squars
1590700599963:all-squares
1590702337235:(def initial-board [[nil nil nil]\n                                        [nil nil nil]\n                                        [nil nil nil]])
1590702365000:(flatten initial-board)
1590702413294:(some? )(flatten initial-board)
1590702436373:(some? (flatten initial-board))
1590702481893:(some (some? (flatten initial-board))\n      \n      ))
1590702576216:(every? nil? (flatten initial-board))
1590772018179:(def full-board [[:X :O :X]\n                                  [:X :O :X]\n                                  [:O :X :O]])
1590772050933:(every? some? (flatten full-board))
1590777793101:(into [1 2 3] [4 5 6])
1590777856677:(def diags\n    (into (for [x [0 1 2]]\n                      [x x])\n                  (for [x [0 1 2]]\n                              [x (- 2 x)])))
1590777860938:diags
1590790030582:(def diags\n    (into (for [x [0 1 2]]\n                      [x x])\n                  (for [x [0 1 2]]\n                              [x (- 2 x)])))
1590790033908:diags
1590792950067:(defn spaces [n]\n    (concat (repeat n " ")))
1590792957418:(spaces 5)
1590793046439:(defn spaces [n]\n    (clojure.string/join "" (repeat n " ")))
1590793050679:(spaces 5)
